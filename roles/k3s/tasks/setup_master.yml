---


- name: zerotier get ip info from
  command: zerotier-cli listnetworks 1db510c0229f8d55 -j
  register: zerotier_network
  when: not ansible_check_mode
  changed_when: false
  tags:
    - zerotier

- name: zerotier | get local node address
  # check_mode: no means "always run this task"
  command: zerotier-cli -j info
  register: zerotier_info
  check_mode: False
  changed_when: false
  tags:
    - zerotier

- name: zerotier | dump info response
  debug:
    var:  zerotier_info.stdout
    verbosity: 2
 # when: not ansible_check_mode
  tags:
    - zerotier

- name: zerotier | dump network response
  debug:
    var:  zerotier_network.stdout
    verbosity: 2
 # when: not ansible_check_mode
  tags:
    - zerotier

- name: zerotier | register responses
  set_fact:
    zerotier_ip:      "{{ (zerotier_network.stdout |from_json)[0].assignedAddresses[0] | replace('/24','') }}"
   # zerotier_address: "{{ (zerotier_info.stdout |from_json).address }}"
   # zerotier_device:  "{{ (zerotier_network.stdout |from_json).portDeviceName }}"
   # zerotier_name:    "{{ (zerotier_network.stdout |from_json).name }}"
    

  #when: not ansible_check_mode
  tags:
    - zerotier


- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0755
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: yes
    state: restarted
    enabled: yes
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )



##### download latest helm version tag
- name: Download latest helm version
  command: curl -s https://api.github.com/repos/helm/helm/releases/latest
  register: helm_version
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  tags: [helm]

# get tag name from returned json with ansible json_query
- name: get tag name from returned json
  set_fact: 
    helm_version_final: "{{ helm_version.stdout | from_json | community.general.json_query(tag_query) }}"
  vars:
    tag_query: "[*].tag_name"
  tags: [helm]
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )



- name: Download and extract helm
  unarchive:
    src: "https://get.helm.sh/helm-{{ helm_version_final }}-linux-{{ system_arch }}.tar.gz"
    dest: /tmp
    remote_src: yes
  tags: [helm]
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )


- name: Move helm binary 
  shell: |
    mv /tmp/linux-{{ system_arch }}/helm /usr/bin/helm
    rm -rf /tmp/linux-{{ system_arch }}
 #   rm -rf /home/ubuntu/linux-arm64
  become: yes
  tags: [helm]
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )


- name: Create proper namespace
  ignore_errors: yes
  shell: |
    kubectl create namespace cattle-system
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: out
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

  
- debug: var=out.stdout_lines

- name: Install Cert Manager
  ignore_errors: yes
  shell: |
    kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.crds.yaml
    kubectl create namespace cert-manager
    helm repo add jetstack https://charts.jetstack.io
    helm repo update  
    helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.0.4 
    kubectl get pods --namespace cert-manager
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: out

- debug: var=out.stdout_lines

# Make Traefik DaemonSet
- name: Copy daemonset traefik.yaml
  register: k3s_service
  template:
    src: "traefik-daemon.yaml"
    dest: "/tmp/traefik-daemon.yaml"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Apply daemon-traffic
  ignore_errors: yes
  shell: | 
    kubectl apply -f /tmp/traefik-daemon.yaml
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out
  
- debug: var=out.stdout_lines

# - name: Delete daemon-traffic
#   ignore_errors: yes
#   shell: | 
#     kubectl delete deployment traefik -n kube-system
#   when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
#   register: out
  
# - debug: var=out.stdout_lines

# - name: Delete daemon-traffic
#   ignore_errors: yes
#   shell: | 
#     kubectl delete daemonset traefik -n kube-system
#   when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
#   register: out
  
#- debug: var=out.stdout_lines



# ## Delete Calico
# - name: Delete Calico
#   ignore_errors: yes
#   shell: |
#     kubectl delete -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
#     kubectl delete -f https://docs.projectcalico.org/manifests/custom-resources.yaml
#   environment:
#     KUBECONFIG: /etc/rancher/k3s/k3s.yaml
#   when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
#   register: out
  
# - debug: var=out.stdout_lines

## Install Calico
- name: Install Calico
  ignore_errors: yes
  shell: |
    kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
  #  kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out
  
- debug: var=out.stdout_lines

- name: Copy calico.yaml to enable ip forwarding
  register: k3s_service
  template:
    src: "calico.yaml"
    dest: "/tmp/calico.yaml"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Apply Calico IP forwarding settings to true
  shell: | 
    kubectl apply -f /tmp/calico.yaml
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out

## Enable the eBPF dataplane
- name: Mount BPF filesystem
  ignore_errors: yes
  shell: |
    mount | grep "/sys/fs/bpf"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out
  
- debug: var=out.stdout_lines

- name: Copy K3s service file for the rest
  register: k3s_service
  template:
    src: "kubernetes-services-endpoint.yaml"
    dest: "/tmp/kubernetes-services-endpoint.yaml"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Apply eBPF
  ignore_errors: yes
  command: kubectl apply -f  /tmp/kubernetes-services-endpoint.yaml
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out
  
- debug: var=out.stdout_lines

- name: Pause for 1 minutes to build app cache
  pause:
    minutes: 1

#- name: Delete 
#  command: kubectl delete pod -n tigera-operator -l k8s-app=tigera-operator
#  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
#  register: out
  
- debug: var=out.stdout_lines

- name: Activate eBPF
  command: kubectl patch installation.operator.tigera.io default --type merge -p '{"spec":{"calicoNetwork":{"linuxDataplane":"BPF", "hostPorts":null}}}'
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out
  
- debug: var=out.stdout_lines

# Deploy Staging and Prod Services
- name: Copy daemonset prod.yaml for echo
  register: k3s_service
  template:
    src: "prod.yaml"
    dest: "/tmp/prod.yaml"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Copy daemonset staging.yaml for echo
  register: k3s_service
  template:
    src: "staging.yaml"
    dest: "/tmp/staging.yaml"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Delete traefik and apply daemon-traffic
  shell: | 
    kubectl apply -f /tmp/staging.yaml
    kubectl apply -f /tmp/prod.yaml
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out


# Copy tls prod
- name: Copy tls prod
  register: k3s_service
  template:
    src: "prod.crt"
    dest: "/tmp/prod.crt"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Copy tls prod
  register: k3s_service
  template:
    src: "prod.key"
    dest: "/tmp/prod.key"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

# Copt tls staging
- name: Copy tls staging
  register: k3s_service
  template:
    src: "staging.crt"
    dest: "/tmp/staging.crt"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

- name: Copy tls staging
  register: k3s_service
  template:
    src: "staging.key"
    dest: "/tmp/staging.key"
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

## Unstall Certificates
# - name: Install Certificates
#   ignore_errors: yes
#   shell: |
#     kubectl -n echo-prod delete secret ssl
#   when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

## Install Certificates
- name: Install Certificates
  ignore_errors: yes
  shell: |
    kubectl -n echo-prod create secret tls ssl --key=/tmp/prod.key --cert=/tmp/prod.crt
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out

- debug: var=out.stdout_lines

## Install Certificates
# - name: Unstall Certificates
#   ignore_errors: yes
#   shell: |
#     kubectl -n echo-staging delete secret ssl
#   when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

## Install Certificates
- name: Install Certificates
  ignore_errors: yes
  shell: |
    kubectl -n echo-staging create secret tls ssl --key=/tmp/staging.key --cert=/tmp/staging.crt
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )
  register: out

- debug: var=out.stdout_lines





# enable wireguard in Calico
- name: enable wireguard in Calico - install calicoctl
  ignore_errors: yes
  shell: |
    cd /usr/local/bin
    curl -o calicoctl -O -L  "https://github.com/projectcalico/calicoctl/releases/download/v3.20.0/calicoctl"  
    chmod +x calicoctl
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: out
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )

# enable wireguard in Calico
- name: enable wireguard in Calico - run calicoctl command
  ignore_errors: yes
  shell: |
    /usr/local/bin/calicoctl patch felixconfiguration default --type='merge' -p '{"spec":{"wireguardEnabled":true}}'
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  register: out
  when: ( "{{ inventory_hostname }}" == "{{ groups['masters'][0] }}" )